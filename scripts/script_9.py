# DOCUMENTATION - README Principal
readme_content = """# üß† NUTRIKAL
**Plateforme de nutrition c√©r√©brale pour dirigeants**

Optimisez votre performance c√©r√©brale gr√¢ce √† une nutrition personnalis√©e bas√©e sur l'IA.

## üöÄ Fonctionnalit√©s

- **Profil personnalis√©** : Analyse compl√®te de vos besoins nutritionnels
- **Plans sur mesure** : G√©n√©ration automatique de plans nutritionnels optimis√©s
- **IA conversationnelle** : Chat local avec Jan.ai pour le suivi quotidien
- **Scoring intelligent** : Calcul de votre score de performance c√©r√©brale
- **Suivi temporel** : √âvolution de vos performances dans le temps
- **Base nutritionnelle** : RAG avec donn√©es scientifiques sur les aliments

## üèóÔ∏è Architecture

```
Frontend (Next.js + Chakra UI)
    ‚Üì
Backend API (Node.js + Fastify)
    ‚Üì
Base de donn√©es (Supabase/PostgreSQL)
    ‚Üì
IA Locale (Jan.ai + RAG)
```

## üìã Pr√©requis

- Node.js 18+
- Docker & Docker Compose
- Compte Supabase (gratuit)
- 4GB RAM minimum pour Jan.ai

## ‚ö° Installation rapide

### 1. Cloner et configurer

```bash
git clone https://github.com/your-username/nutrikal.git
cd nutrikal

# Copier la configuration d'environnement
cp .env.example .env
```

### 2. Configurer Supabase

1. Cr√©er un projet sur [supabase.com](https://supabase.com)
2. Ex√©cuter le sch√©ma SQL :
   ```sql
   -- Copier le contenu de database/schema.sql
   -- dans l'√©diteur SQL de Supabase
   ```
3. Mettre √† jour `.env` avec vos cl√©s Supabase

### 3. D√©marrer avec Docker

```bash
# D√©marrer tous les services
docker-compose up -d

# V√©rifier que tout fonctionne
curl http://localhost:3000  # Frontend
curl http://localhost:3001/health  # Backend API
curl http://localhost:1337  # Jan AI
```

### 4. Initialiser les donn√©es

```bash
# Importer la base nutritionnelle
cd ai/
python rag_setup.py
```

## üéØ Utilisation

1. **Acc√©der √† l'app** : http://localhost:3000
2. **Cr√©er un compte** et compl√©ter votre profil
3. **G√©n√©rer votre plan** nutritionnel personnalis√©
4. **Discuter avec l'IA** pour le suivi quotidien
5. **Suivre vos scores** sur le dashboard

## üìÅ Structure du projet

```
nutrikal/
‚îú‚îÄ‚îÄ frontend/          # Next.js app
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ lib/
‚îú‚îÄ‚îÄ backend/           # Node.js API
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ config/
‚îú‚îÄ‚îÄ database/          # SQL schemas
‚îú‚îÄ‚îÄ ai/               # Jan.ai config & RAG
‚îú‚îÄ‚îÄ deployment/       # Docker configs
‚îî‚îÄ‚îÄ docs/            # Documentation
```

## üîß D√©veloppement

### Backend

```bash
cd backend/
npm install
npm run dev  # Port 3001
```

### Frontend

```bash
cd frontend/
npm install
npm run dev  # Port 3000
```

### Base de donn√©es

Les migrations sont dans `database/schema.sql`.
Utilisez Supabase Studio pour les modifications.

## ü§ñ Configuration IA

### Jan.ai

- **Config** : `ai/jan_config.json`
- **Prompts** : `ai/system_prompts.json`
- **RAG** : `ai/rag_setup.py`

### Personnaliser les prompts

√âditez `ai/system_prompts.json` pour adapter le comportement de l'IA :

```json
{
  "main_prompt": {
    "content": "Votre prompt personnalis√©..."
  }
}
```

## üìä API Endpoints

### Utilisateurs
- `POST /api/users/register` - Inscription
- `POST /api/users/login` - Connexion
- `GET /api/users/profile` - Profil
- `PUT /api/users/profile` - Mise √† jour profil

### Plans nutritionnels
- `POST /api/mealplans/generate` - G√©n√©rer plan
- `GET /api/mealplans/active` - Plan actif
- `POST /api/mealplans/consumed` - Enregistrer repas

### Scores
- `GET /api/scores` - Historique scores
- `POST /api/scores/calculate` - Calculer score
- `GET /api/scores/stats` - Statistiques

## üîí S√©curit√©

- JWT pour l'authentification
- RLS (Row Level Security) sur Supabase
- Variables d'environnement pour les secrets
- CORS configur√©
- Validation des donn√©es avec Ajv

## üöÄ D√©ploiement

### Production

```bash
# Build et d√©ployer
docker-compose -f docker-compose.prod.yml up -d
```

### Variables d'environnement

Configurez ces variables pour la production :

```bash
NODE_ENV=production
SUPABASE_URL=your-production-url
JWT_SECRET=your-super-secret-key
```

## üß™ Tests

```bash
# Backend
cd backend/ && npm test

# Frontend  
cd frontend/ && npm test

# E2E
npm run test:e2e
```

## üìà Roadmap

- [ ] Application mobile (React Native)
- [ ] Int√©gration objets connect√©s (balance, montre)
- [ ] IA avanc√©e (GPT-4, Claude)
- [ ] Marketplace de recettes
- [ ] Communaut√© dirigeants
- [ ] Rapports m√©dicaux PDF

## ü§ù Contribution

1. Fork le projet
2. Cr√©er une branche (`git checkout -b feature/AmazingFeature`)
3. Commit (`git commit -m 'Add some AmazingFeature'`)
4. Push (`git push origin feature/AmazingFeature`)
5. Ouvrir une Pull Request

## üìÑ License

MIT License - voir [LICENSE](LICENSE) pour plus de d√©tails.

## üí° Support

- Documentation : [docs/](docs/)
- Issues : [GitHub Issues](https://github.com/your-username/nutrikal/issues)
- Email : contact@nutrikal.com

---

**D√©velopp√© avec ‚ù§Ô∏è pour optimiser la performance c√©r√©brale des dirigeants**
"""

with open('README.md', 'w') as f:
    f.write(readme_content)

# DOCUMENTATION - Guide de setup
setup_guide = """# üõ†Ô∏è Guide de Setup NUTRIKAL

Ce guide vous accompagne √©tape par √©tape pour d√©ployer NUTRIKAL.

## üìã Checklist pr√©-installation

- [ ] Node.js 18+ install√©
- [ ] Docker Desktop install√© et d√©marr√©
- [ ] Compte Supabase cr√©√© (gratuit)
- [ ] √âditeur de code (VS Code recommand√©)
- [ ] Git install√©

## üöÄ Installation compl√®te

### √âtape 1 : Pr√©parer l'environnement

```bash
# Cloner le repository
git clone https://github.com/your-username/nutrikal.git
cd nutrikal

# V√©rifier les pr√©requis
node --version  # Doit √™tre >= 18
docker --version
```

### √âtape 2 : Configurer Supabase

1. **Cr√©er un projet Supabase**
   - Aller sur [supabase.com](https://supabase.com)
   - "New Project" ‚Üí Choisir un nom et mot de passe
   - Attendre la cr√©ation (2-3 minutes)

2. **R√©cup√©rer les cl√©s**
   - Project Settings ‚Üí API
   - Copier `URL` et `anon key`
   - Service Role ‚Üí Copier `service_role key`

3. **Cr√©er le sch√©ma de base**
   ```bash
   # Dans Supabase Dashboard
   # SQL Editor ‚Üí New Query
   # Copier le contenu de database/schema.sql
   # Ex√©cuter
   ```

4. **Importer les donn√©es de test**
   ```bash
   # Copier le contenu de database/seed_data.sql
   # Ex√©cuter dans SQL Editor
   ```

### √âtape 3 : Configuration locale

```bash
# Copier les variables d'environnement
cp .env.example .env

# √âditer .env avec vos cl√©s Supabase
nano .env
```

Compl√©ter `.env` :
```env
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_SERVICE_ROLE_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
SUPABASE_ANON_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
JWT_SECRET=your-super-secret-random-string
```

### √âtape 4 : D√©marrer les services

```bash
# Construire et d√©marrer tous les containers
docker-compose up --build -d

# V√©rifier que tout d√©marre
docker-compose ps
```

Vous devriez voir :
```
NAME                 STATUS
nutrikal-backend     Up 
nutrikal-frontend    Up
jan-ai               Up
nginx                Up
```

### √âtape 5 : Initialiser l'IA

```bash
# Configurer le RAG avec les donn√©es nutritionnelles
cd ai/
python rag_setup.py

# V√©rifier que Jan.ai r√©pond
curl http://localhost:1337/health
```

### √âtape 6 : Tests de fonctionnement

1. **Frontend** : http://localhost:3000
   - Page d'accueil doit s'afficher
   - Tester l'inscription/connexion

2. **Backend API** : http://localhost:3001/health
   - Doit retourner `{"status":"healthy"}`

3. **Jan AI** : http://localhost:1337
   - Interface Jan.ai accessible

4. **Base de donn√©es**
   - V√©rifier dans Supabase Dashboard
   - Tables cr√©√©es et donn√©es import√©es

## üîß Configuration avanc√©e

### Personnaliser les prompts IA

√âditez `ai/system_prompts.json` :

```json
{
  "main_prompt": {
    "content": "Tu es NUTRIKAL AI, sp√©cialis√© en nutrition c√©r√©brale..."
  }
}
```

Red√©marrer Jan.ai :
```bash
docker-compose restart jan-ai
```

### Ajouter des aliments

1. **Via l'interface Supabase**
   - Table Editor ‚Üí `food_database`
   - Insert row

2. **Via script**
   ```bash
   cd ai/
   # √âditer nutrition_kb.csv
   python rag_setup.py  # Re-indexer
   ```

### Configuration HTTPS (production)

1. **Obtenir un certificat SSL**
   ```bash
   # Let's Encrypt
   certbot certonly --webroot -w /var/www/html -d your-domain.com
   ```

2. **Configurer Nginx**
   - √âditer `nginx/nginx.conf`
   - Pointer vers vos certificats

3. **Red√©marrer**
   ```bash
   docker-compose restart nginx
   ```

## üö® R√©solution de probl√®mes

### Backend ne d√©marre pas
```bash
# V√©rifier les logs
docker-compose logs nutrikal-backend

# Probl√®mes courants :
# - Variables d'environnement manquantes
# - Supabase inaccessible
# - Port 3001 d√©j√† utilis√©
```

### Frontend erreur de build
```bash
# Reconstruire
docker-compose build nutrikal-frontend
docker-compose up nutrikal-frontend

# V√©rifier next.config.js
```

### Jan.ai ne r√©pond pas
```bash
# V√©rifier les ressources
docker stats

# Jan.ai n√©cessite au moins 2GB RAM
# V√©rifier le mod√®le dans jan_config.json
```

### Base de donn√©es vide
```bash
# Re-ex√©cuter le sch√©ma
# Dans Supabase SQL Editor :
# 1. Copier database/schema.sql
# 2. Ex√©cuter
# 3. Copier database/seed_data.sql  
# 4. Ex√©cuter
```

## üìà Monitoring

### Logs en temps r√©el
```bash
# Tous les services
docker-compose logs -f

# Service sp√©cifique
docker-compose logs -f nutrikal-backend
```

### M√©triques syst√®me
```bash
# Utilisation ressources
docker stats

# Espace disque
docker system df
```

### Health checks
```bash
# Scripts de v√©rification
curl http://localhost:3000 || echo "Frontend KO"
curl http://localhost:3001/health || echo "Backend KO" 
curl http://localhost:1337 || echo "Jan AI KO"
```

## üîÑ Mises √† jour

```bash
# R√©cup√©rer les derni√®res modifications
git pull

# Reconstruire si n√©cessaire
docker-compose build

# Red√©marrer
docker-compose up -d
```

## üíæ Sauvegarde

### Base de donn√©es
```bash
# Export depuis Supabase Dashboard
# Settings ‚Üí Database ‚Üí Backup
```

### Configuration
```bash
# Sauvegarder les fichiers importants
tar -czf nutrikal-backup.tar.gz .env ai/ nginx/
```

## üéâ Validation finale

Une fois tout install√©, vous devriez pouvoir :

1. ‚úÖ Acc√©der √† l'interface web
2. ‚úÖ Cr√©er un compte utilisateur  
3. ‚úÖ Compl√©ter un profil
4. ‚úÖ G√©n√©rer un plan nutritionnel
5. ‚úÖ Discuter avec l'IA
6. ‚úÖ Voir les scores sur le dashboard

**Bravo ! NUTRIKAL est op√©rationnel ! üéä**
"""

with open('SETUP.md', 'w') as f:
    f.write(setup_guide)

print("‚úÖ Documentation compl√®te cr√©√©e :")
print("  - README.md")
print("  - SETUP.md")

# R√©sum√© final de tous les fichiers cr√©√©s
print("\n" + "="*50)
print("üéâ APPLICATION NUTRIKAL COMPL√àTE G√âN√âR√âE")
print("="*50)

all_files = [
    "üìÅ DATABASE:",
    "  - schema.sql (Sch√©ma PostgreSQL/Supabase)",
    "  - seed_data.sql (Donn√©es de d√©marrage)",
    "",
    "üìÅ BACKEND (Node.js + Fastify):",
    "  - backend_package.json", 
    "  - server.js (Serveur principal)",
    "  - database_config.js (Configuration Supabase)",
    "  - users_routes.js (API utilisateurs)",
    "  - mealplans_routes.js (API plans nutritionnels)",
    "  - scores_routes.js (API scores)",
    "  - nutritionScore.js (Calculs de performance)",
    "",
    "üìÅ FRONTEND (Next.js + Chakra UI):",
    "  - frontend_package.json",
    "  - next.config.js",
    "  - supabase_lib.js (Config Supabase)",
    "  - index_page.js (Page d'accueil)",
    "  - ProfileForm.jsx (Formulaire profil)",
    "  - Dashboard.jsx (Tableau de bord)",
    "  - ScoreChart.jsx (Graphique scores)",
    "  - MealPlan.jsx (Affichage plans)",
    "",
    "üìÅ IA & RAG:",
    "  - system_prompts.json (Prompts pour Jan.ai)",
    "  - jan_config.json (Configuration Jan)",
    "  - rag_setup.py (Setup base nutritionnelle)",
    "",
    "üìÅ D√âPLOIEMENT:",
    "  - docker-compose.yml (Orchestration)",
    "  - Dockerfile.backend",
    "  - Dockerfile.frontend", 
    "  - .env.example (Variables d'environnement)",
    "",
    "üìÅ DOCUMENTATION:",
    "  - README.md (Guide principal)",
    "  - SETUP.md (Installation d√©taill√©e)",
]

for line in all_files:
    print(line)

print("\nüöÄ PR√äT √Ä D√âPLOYER !")
print("1. Configurer Supabase")
print("2. Copier .env.example vers .env")
print("3. docker-compose up --build -d")
print("4. Acc√©der √† http://localhost:3000")
print("\nüí° Voir SETUP.md pour les d√©tails complets")