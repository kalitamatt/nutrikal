# AI - System Prompts pour Jan
system_prompts = {
    "main_prompt": {
        "role": "system",
        "content": """Tu es NUTRIKAL AI, un assistant sp√©cialis√© en nutrition c√©r√©brale pour dirigeants d'entreprise.

MISSION: Aider les dirigeants √† optimiser leur performance c√©r√©brale gr√¢ce √† l'alimentation.

PERSONNALIT√â:
- Expert en nutrition et neurosciences
- Bienveillant mais direct
- Adapt√© au rythme soutenu des dirigeants
- Bas√© sur des donn√©es scientifiques

WORKFLOW PRINCIPAL:
1. COLLECTE DU PROFIL (si nouveau utilisateur):
   - √Çge et sexe
   - Poids et taille  
   - Niveau d'activit√© physique
   - Heures de sommeil par nuit
   - Niveau de stress (1-10)
   - Allergies alimentaires
   - Aliments d√©test√©s
   - Objectifs c√©r√©braux prioritaires

2. SUIVI QUOTIDIEN:
   - Demander ce que l'utilisateur a mang√© r√©ellement
   - Comparer avec son plan nutritionnel
   - Identifier les √©carts et leurs impacts
   - Proposer des ajustements

3. FEEDBACK ET ENCOURAGEMENT:
   - Calculer un score de performance c√©r√©brale
   - Expliquer les b√©n√©fices des bons choix
   - Sugg√©rer des am√©liorations concr√®tes
   - C√©l√©brer les progr√®s

R√àGLES IMPORTANTES:
- Pose UNE question √† la fois
- Sois concis (max 2-3 phrases)
- Utilise des √©mojis avec parcimonie üß†
- Concentre-toi sur les nutriments cl√©s: om√©ga-3, magn√©sium, antioxydants
- Adapte tes conseils au profil sp√©cifique de l'utilisateur
- Ne donne jamais de conseils m√©dicaux, r√©f√®re √† un professionnel si besoin

DONN√âES NUTRITIONNELLES √Ä PRIORISER:
- Om√©ga-3 (DHA/EPA): 1-2g/jour pour la m√©moire
- Magn√©sium: 300-400mg/jour pour le stress
- Antioxydants: pour la protection neuronale
- Prot√©ines: pour la synth√®se des neurotransmetteurs
- Glucides complexes: pour l'√©nergie stable

Commence toujours par te pr√©senter bri√®vement et demander o√π en est l'utilisateur dans son parcours NUTRIKAL."""
    },
    
    "daily_tracking_prompt": {
        "role": "system", 
        "content": """Tu es en mode SUIVI QUOTIDIEN. L'utilisateur a un profil √©tabli et un plan nutritionnel.

OBJECTIF: Collecter ce qu'il a r√©ellement mang√© aujourd'hui et comparer avec son plan.

PROCESS:
1. Demande pour chaque repas (petit-d√©j, d√©jeuner, d√Æner):
   - Qu'as-tu mang√© exactement?
   - En quelle quantit√© approximativement?

2. Pour chaque aliment mentionn√©:
   - Identifie-le dans ta base de donn√©es
   - Estime les apports nutritionnels
   - Note les √©carts vs le plan pr√©vu

3. Donne un feedback imm√©diat:
   - Points positifs (ce qui √©tait bien)
   - √âcarts identifi√©s
   - Impact sur la performance c√©r√©brale
   - Suggestion d'ajustement pour demain

4. Propose un score sur 100 bas√© sur:
   - Adh√©rence au plan (40%)
   - Qualit√© nutritionnelle (40%) 
   - √âquilibre global (20%)

Reste encourageant m√™me si la journ√©e n'√©tait pas parfaite. Focus sur les solutions pour demain."""
    },

    "meal_analysis_prompt": {
        "role": "system",
        "content": """Tu analyses un repas sp√©cifique pour calculer son impact sur la performance c√©r√©brale.

√âVALUATION NUTRITIONNELLE:
- Calories: impact sur l'√©nergie stable
- Prot√©ines: synth√®se neurotransmetteurs  
- Om√©ga-3: fluidit√© membranaire, m√©moire
- Magn√©sium: gestion du stress neuronal
- Antioxydants: protection contre l'inflammation

CRIT√àRES DE SCORING:
- Excellent (9-10): Repas optimal pour le cerveau
- Tr√®s bien (7-8): Bon √©quilibre avec b√©n√©fices clairs
- Bien (5-6): Correct mais peut √™tre optimis√©
- √Ä am√©liorer (3-4): Quelques b√©n√©fices mais lacunes importantes
- Insuffisant (1-2): Peu de b√©n√©fices pour la performance c√©r√©brale

Pour chaque repas analys√©, donne:
1. Score sur 10
2. Points forts nutritionnels
3. Manques identifi√©s
4. Suggestions d'am√©lioration concr√®tes
5. B√©n√©fice attendu sur la performance c√©r√©brale

Sois pr√©cis et factuel, avec des r√©f√©rences scientifiques simples."""
    }
}

with open('system_prompts.json', 'w') as f:
    f.write(json.dumps(system_prompts, indent=2, ensure_ascii=False))

# AI - Configuration Jan
jan_config = {
    "models": [
        {
            "name": "nutrikal-assistant", 
            "model": "llama2-7b-chat",
            "temperature": 0.7,
            "max_tokens": 512,
            "system_prompt": "nutrikal_main"
        }
    ],
    "api_server": {
        "host": "0.0.0.0",
        "port": 1337,
        "cors_enabled": True,
        "api_key": "nutrikal-api-key-2024"
    },
    "data_folder": "/app/jan_data",
    "conversation_memory": True,
    "max_conversation_length": 50
}

with open('jan_config.json', 'w') as f:
    f.write(json.dumps(jan_config, indent=2))

# AI - Script setup RAG
rag_setup = """#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
Configuration RAG pour NUTRIKAL
Indexe la base de donn√©es nutritionnelle pour permettre √† l'IA
de r√©pondre avec des donn√©es factuelles sur les aliments
\"\"\"

import os
import pandas as pd
from langchain.document_loaders import CSVLoader
from langchain.text_splitter import CharacterTextSplitter  
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA

def setup_nutrition_rag():
    \"\"\"Configure le syst√®me RAG avec les donn√©es nutritionnelles\"\"\"
    
    print("üîß Configuration du RAG NUTRIKAL...")
    
    # 1. Charger les donn√©es nutritionnelles
    if not os.path.exists('nutrition_kb.csv'):
        print("‚ùå Fichier nutrition_kb.csv manquant")
        return None
        
    loader = CSVLoader('nutrition_kb.csv', encoding='utf-8')
    documents = loader.load()
    print(f"‚úÖ {len(documents)} aliments charg√©s")
    
    # 2. Diviser en chunks
    text_splitter = CharacterTextSplitter(
        chunk_size=200,
        chunk_overlap=20
    )
    docs = text_splitter.split_documents(documents)
    print(f"‚úÖ {len(docs)} chunks cr√©√©s")
    
    # 3. Cr√©er les embeddings
    embeddings = HuggingFaceEmbeddings(
        model_name="sentence-transformers/all-MiniLM-L6-v2"
    )
    
    # 4. Cr√©er l'index vectoriel
    vectorstore = FAISS.from_documents(docs, embeddings)
    vectorstore.save_local("nutrikal_vectorstore")
    print("‚úÖ Index vectoriel sauvegard√©")
    
    # 5. Tester la recherche
    query = "aliments riches en om√©ga-3"
    results = vectorstore.similarity_search(query, k=3)
    print(f"üîç Test recherche '{query}':")
    for i, result in enumerate(results):
        print(f"  {i+1}. {result.page_content[:100]}...")
    
    return vectorstore

def create_nutrition_kb_csv():
    \"\"\"Cr√©e un fichier CSV avec les donn√©es nutritionnelles de base\"\"\"
    
    nutrition_data = [
        {
            "aliment": "Saumon",
            "categorie": "Poisson",
            "calories_100g": 208,
            "proteines_100g": 25.4,
            "omega3_100g": 1.8,
            "magnesium_100g": 29,
            "benefices_cerveau": "Riche en DHA pour la m√©moire et la concentration. Am√©liore la fluidit√© des membranes neuronales.",
            "conseils_consommation": "2-3 fois par semaine, grill√© ou cuit vapeur. √âviter la friture."
        },
        {
            "aliment": "Noix",
            "categorie": "Fruits √† coque", 
            "calories_100g": 654,
            "proteines_100g": 15.2,
            "omega3_100g": 9.1,
            "magnesium_100g": 158,
            "benefices_cerveau": "Excellente source d'om√©ga-3 v√©g√©taux. Am√©liore les fonctions cognitives et r√©duit l'inflammation c√©r√©brale.",
            "conseils_consommation": "30g par jour maximum (une poign√©e). Id√©al en collation ou dans les salades."
        },
        {
            "aliment": "√âpinards",
            "categorie": "L√©gumes verts",
            "calories_100g": 23,
            "proteines_100g": 2.9,
            "omega3_100g": 0.1,
            "magnesium_100g": 79,
            "benefices_cerveau": "Riche en magn√©sium pour r√©guler le stress neuronal. Contient des antioxydants prot√©geant les neurones.",
            "conseils_consommation": "Crus en salade ou cuits rapidement. Accompagne bien les poissons gras."
        },
        {
            "aliment": "Myrtilles",
            "categorie": "Fruits",
            "calories_100g": 57,
            "proteines_100g": 0.7,
            "omega3_100g": 0.1,
            "magnesium_100g": 6,
            "benefices_cerveau": "Tr√®s riches en antioxydants (anthocyanes). Am√©liorent la m√©moire et ralentissent le vieillissement c√©r√©bral.",
            "conseils_consommation": "150g par jour. Fra√Æches, surgel√©es ou en smoothie. Parfait au petit-d√©jeuner."
        },
        {
            "aliment": "Avocat",
            "categorie": "Fruits",
            "calories_100g": 160,
            "proteines_100g": 2,
            "omega3_100g": 0.1,
            "magnesium_100g": 29,
            "benefices_cerveau": "Acides gras monoinsatur√©s pour la sant√© vasculaire c√©r√©brale. Am√©liore la circulation sanguine vers le cerveau.",
            "conseils_consommation": "1/2 avocat par jour. En salade, toast ou smoothie vert."
        }
    ]
    
    df = pd.DataFrame(nutrition_data)
    df.to_csv('nutrition_kb.csv', index=False, encoding='utf-8')
    print(f"‚úÖ Fichier nutrition_kb.csv cr√©√© avec {len(nutrition_data)} aliments")
    
    return df

def test_rag_queries():
    \"\"\"Teste diff√©rentes requ√™tes sur le syst√®me RAG\"\"\"
    
    test_queries = [
        "aliments pour am√©liorer la m√©moire",
        "sources d'om√©ga-3",
        "r√©duire le stress avec l'alimentation", 
        "antioxydants pour le cerveau",
        "petit-d√©jeuner pour la concentration"
    ]
    
    if not os.path.exists("nutrikal_vectorstore"):
        print("‚ùå Index RAG non trouv√©. Ex√©cutez setup_nutrition_rag() d'abord.")
        return
        
    embeddings = HuggingFaceEmbeddings()
    vectorstore = FAISS.load_local("nutrikal_vectorstore", embeddings)
    
    print("üß™ Test des requ√™tes RAG:")
    for query in test_queries:
        results = vectorstore.similarity_search(query, k=2)
        print(f"\\n‚ùì '{query}':")
        for i, result in enumerate(results):
            print(f"  {i+1}. {result.page_content[:150]}...")

if __name__ == "__main__":
    # Cr√©er les donn√©es nutritionnelles si elles n'existent pas
    if not os.path.exists('nutrition_kb.csv'):
        create_nutrition_kb_csv()
    
    # Configurer le RAG
    vectorstore = setup_nutrition_rag()
    
    if vectorstore:
        # Tester les requ√™tes
        test_rag_queries()
        print("\\nüéâ Configuration RAG termin√©e avec succ√®s!")
    else:
        print("\\n‚ùå √âchec de la configuration RAG")
"""

with open('rag_setup.py', 'w') as f:
    f.write(rag_setup)

print("‚úÖ Configuration IA cr√©√©e :")
print("  - system_prompts.json")
print("  - jan_config.json") 
print("  - rag_setup.py")